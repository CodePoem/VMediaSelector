apply plugin: 'com.android.application'

def keystorePWD = ''
def keystoreAlias = ''
def keystoreAliasPWD = ''
// local.properties file in the root director
def keyFile = project.rootProject.file('local.properties')

Properties properties = new Properties()
// local.properties exists
if (keyFile.exists()) {
    properties.load(keyFile.newDataInputStream())
} else {
    keyFile = file("../no_exists_keystore.tmp")
}

// local.properties contains keystore.path
if (properties.containsKey("keystore.path")) {
    keyFile = file(properties.getProperty("keystore.path"))
    keystorePWD = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPWD = properties.getProperty("keystore.alias_password")
} else {
    keyFile = file("../no_exists_keystore.tmp")
}

def isRunningOnTravis = System.getenv("CI") == "true"
if (isRunningOnTravis) {
    keyFile = file("../mrd@vdreamers")
    keystorePWD = System.getenv("KEYSTORE_PWD")
    keystoreAlias = System.getenv("KEYSTORE_ALIAS")
    keystoreAliasPWD = System.getenv("KEYSTORE_ALIAS_PWD")
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            keyAlias keystoreAlias
            keyPassword keystoreAliasPWD
            storeFile keyFile
            storePassword keystorePWD
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 签名文件存在，则签名
            if (keyFile.exists()) {
                println("WITH -> buildTypes -> release: using jks key")
                signingConfig signingConfigs.release
            } else {
                println("WITH -> buildTypes -> release: using default key")
                signingConfig signingConfigs.debug
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation rootProject.ext.testDependencies['junit']
    androidTestImplementation rootProject.ext.testDependencies['androidxTestExtJunit']
    androidTestImplementation rootProject.ext.testDependencies['androidxTestEspressoCore']

    implementation rootProject.ext.dependencies['androidxAppcompat']
    implementation rootProject.ext.dependencies['androidxConstraintLayout']
    implementation rootProject.ext.dependencies['androidxRecyclerView']

    implementation project(':v-media-selector')

    implementation rootProject.ext.dependencies['glide']
}
